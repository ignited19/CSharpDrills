using System;
using System.Linq;
using System.Reflection;

namespace CSharp_Drills
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Let's Rock!");
         

            //AllUniqueCharacters();
            PermutationCheck();
        }


        /*================================================
         * Function: To check if a string contains all
         * unique characters
         * ===============================================*/
        static void AllUniqueCharacters()
        {
            /*Checks to see if user would like to continue testing strings*/
            int ContinueTesting = 1;
            /*Character Tracker will determine if string a contains unique characters*/
            bool [] CharacterTracker = new bool [126];

            /*This while loop allow's the user to continue testing strings until they are done*/
            while (ContinueTesting == 1)
            {

                /*Acquire string from user. Save a raw version */
                Console.WriteLine("This module tests if a string contains all unqiue characters: Please enter a string you would like to check");
                string RawUserInput = Console.ReadLine();
                string TestString = RawUserInput.ToLower();
                bool StringContainsAllUniqueChar = true;

                /*Place holder variables for function*/
                bool CurrentValue;
                int CurrentValueArrPosition;

                /*Iterate through string a and check/populate CharacterTracker*/
                foreach (char Element in TestString)
                {
                    CurrentValueArrPosition = (int)Element;
                    CurrentValue = (bool)CharacterTracker.GetValue(CurrentValueArrPosition);


                    if (CurrentValue == true)
                    {
                        Console.WriteLine("I am so sorry, but the string \"" + RawUserInput + "\" " + "contains duplicate " + Element + "\'s");
                        StringContainsAllUniqueChar = false;      
                    }



                    CharacterTracker.SetValue(true, CurrentValueArrPosition);

                }

                if(StringContainsAllUniqueChar==true)
                    Console.WriteLine("Congrats!!!! \"" + RawUserInput + "\", contains all unqiue characters");

                Console.WriteLine("Continue testing strings? 1 = yes, 0 = no");
                ContinueTesting = Convert.ToInt32(Console.ReadLine());

                
                
                //ViewContentsOfAnArray(CharacterTracker);

            }
        }

        /*================================================
         * Function: To check if a two strings are a 
         * permutation of each other
         * ===============================================*/

        static void PermutationCheck ()
        {

            int ContinueTesting = 1;

            /* Incorperate a while loop so user can continue testing until they are done*/
            while (ContinueTesting == 1) {
                
                /*acquire the two strings that are going to be checked from the user*/
                Console.WriteLine("Alright, lets do this! Please enter in the first string to check");
                string a = Console.ReadLine();
                Console.WriteLine("Great! Now please enter in the second string to check");
                string b = Console.ReadLine();


                /*Check to see if both string a and b have the same length, if not they cannot be permutations*/
                if (a.Length != b.Length)
                {
                    Console.WriteLine("I am so sorry! String a has a length of: " + a.Length + " and string b has a length" +
                        "of " + b.Length + ". They cannot be permutations");
                    return;
                }


                /*Create character arrays for both string a & b so we can use orderby to sort them*/
                char[] CharArr_StrA = a.ToLower().ToCharArray();
                char[] CharArr_StrB = b.ToLower().ToCharArray();

                /*sort both CharArr so we can easily spot the differences */
                Array.Sort(CharArr_StrA);
                Array.Sort(CharArr_StrB);

                /*Check for differences between the two character arrays*/
                for (int i = 0; i < CharArr_StrA.Length; i++)
                {
                    if (CharArr_StrA[i] != CharArr_StrB[i])
                    {
                        Console.WriteLine("I am sorry, but these two strings are not permutations of each other");
                        return;
                    }
                }

                Console.WriteLine("Hey! Look at that! They are permutations of each other!!");
                Console.WriteLine("Continue testing strings? 1 = yes, 0 = no");
                ContinueTesting = Convert.ToInt32(Console.ReadLine());
            }
        }

        static void ViewContentsOfAnArray(bool[] Arr)
        {
            foreach (bool Element in Arr)
            {
                Console.WriteLine(Element);
            }

        }

        static void ViewContentsOfAnArray(char[] Arr)
        {
            foreach (char Element in Arr)
            {
                Console.WriteLine(Element);
            }

        }
    }
}
